{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","hours","setHours","mins","setMins","seconds","setSeconds","mSeconds","setMSeconds","isStarted","setIsStarted","rounds","setRounds","i","useRef","start","useCallback","current","setInterval","prevState","stop","clearInterval","prev","className","toString","length","onClick","curTime","ms","s","m","h","round","map","e","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAyEeA,MAhEf,WAAgB,IAAD,EACeC,mBAAiB,GADhC,mBACJC,EADI,KACGC,EADH,OAEaF,mBAAiB,GAF9B,mBAEJG,EAFI,KAEEC,EAFF,OAGmBJ,mBAAiB,GAHpC,mBAGJK,EAHI,KAGKC,EAHL,OAIqBN,mBAAiB,GAJtC,mBAIJO,EAJI,KAIMC,EAJN,OAKuBR,oBAAS,GALhC,mBAKJS,EALI,KAKOC,EALP,OAMiBV,mBAAwB,IANzC,mBAMJW,EANI,KAMIC,EANJ,KAOLC,EAAIC,iBAAY,MAEhBC,EAASC,uBAAY,WACvBH,EAAEI,QAAUC,aAAY,WACpBV,GAAY,SAAAW,GAAS,OAAIA,EAAU,OACrC,IACFT,GAAa,KACd,IACGU,EAAOJ,uBAAY,WACrBK,cAAcR,EAAEI,SAChBP,GAAa,KACd,IAqBL,OAHkB,MAAbH,IAAmBC,GAAY,SAAAc,GAAI,OAAE,KAAGhB,GAAW,SAAAa,GAAS,OAAIA,EAAU,MAC9D,KAAZd,IAAiBC,GAAW,SAAAgB,GAAI,OAAE,KAAGlB,GAAQ,SAAAe,GAAS,OAAIA,EAAU,MAC3D,KAAThB,IAAcC,GAAQ,SAAAkB,GAAI,OAAE,KAAGpB,GAAS,SAAAiB,GAAS,OAAIA,EAAU,MAElE,sBAAKI,UAAW,YAAhB,UACE,+BACgC,IAA3BtB,EAAMuB,WAAWC,OAAjB,WAAkCxB,GAAQA,EAD/C,IAEgC,IAA1BE,EAAKqB,WAAWC,OAAhB,WAAiCtB,GAAOA,EAF9C,IAGmC,IAA7BE,EAAQmB,WAAWC,OAAnB,WAAoCpB,GAAUA,EAHpD,IAIoC,IAA9BE,EAASiB,WAAWC,OAApB,WAAqClB,GAAWA,KAEnDE,EACI,gCACG,wBAAQiB,QAAS,kBAtBf,WACV,IAAMC,EAAU,CACZC,GAAGrB,EACHsB,EAAExB,EACFyB,EAAE3B,EACF4B,EAAE9B,GAENW,EAAU,GAAD,mBAAKD,GAAL,CAAagB,KAeOK,IAAST,UAAW,eAAzC,mBACA,wBAAQG,QAAS,kBAAIN,KAAQG,UAAW,iBAAxC,qBAEH,gCACG,wBAAQG,QAAS,kBAAIX,KAASQ,UAAW,eAAzC,mBACA,wBAAQG,QAAS,kBAlCzBhB,GAAa,GACbF,EAAY,GACZF,EAAW,GACXF,EAAQ,GACRF,EAAS,QACTU,EAAU,KA6B4BW,UAAW,iBAAzC,sBAGPZ,EAAOsB,KAAI,SAACC,EAAGC,GAAJ,OAAmB,+BAC1BA,EAAM,EADoB,KACfD,EAAEH,EADa,IACTG,EAAEJ,EADO,IACHI,EAAEL,EADC,IACGK,EAAEN,KADIO,UCpDjCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0ff635d.chunk.js","sourcesContent":["import React, {useCallback, useRef, useState} from 'react';\n\ntype cutTimeType = {\n    ms:number,\n    s:number,\n    m:number,\n    h:number\n}\n\nfunction App() {\n    const [hours, setHours] = useState<number>(0)\n    const [mins, setMins] = useState<number>(0)\n    const [seconds, setSeconds] = useState<number>(0)\n    const [mSeconds, setMSeconds] = useState<number>(0)\n    const [isStarted, setIsStarted] = useState(false)\n    const [rounds, setRounds] = useState<cutTimeType[]>([])\n    const i = useRef<any>(null)\n\n    const start =  useCallback(() =>{\n        i.current = setInterval(()=>{\n            setMSeconds(prevState => prevState+1)\n        },10)\n        setIsStarted(true)\n    }, [])\n    const stop = useCallback(()=>{\n        clearInterval(i.current)\n        setIsStarted(false)\n    }, [])\n    const clear = () => {\n        setIsStarted(false)\n        setMSeconds(0)\n        setSeconds(0)\n        setMins(0)\n        setHours(0)\n        setRounds([])\n    }\n    const round = () => {\n        const curTime = {\n            ms:mSeconds,\n            s:seconds,\n            m:mins,\n            h:hours\n        }\n        setRounds([...rounds, curTime])\n    }\n    if(mSeconds === 100) {setMSeconds(prev=>0);setSeconds(prevState => prevState+1)}\n    if(seconds === 60) {setSeconds(prev=>0);setMins(prevState => prevState+1)}\n    if(mins === 60) {setMins(prev=>0);setHours(prevState => prevState+1)}\n  return (\n    <div className={\"container\"} >\n      <h1>\n          {hours.toString().length ===1? `0${hours}`:hours }\n          :{mins.toString().length ===1? `0${mins}`:mins }\n          :{seconds.toString().length ===1? `0${seconds}`:seconds }\n          :{mSeconds.toString().length ===1? `0${mSeconds}`:mSeconds }\n      </h1>\n        {isStarted\n            ?<div>\n                <button onClick={()=>round()} className={\"btn btn-info\"}>Round</button>\n                <button onClick={()=>stop()} className={\"btn btn-danger\"}>Stop</button>\n            </div>\n            :<div>\n                <button onClick={()=>start()} className={\"btn btn-info\"}>Start</button>\n                <button onClick={()=>clear()} className={\"btn btn-danger\"}>Clear</button>\n            </div>\n        }\n        {rounds.map((e, index:number)=><h3 key={index}>\n            {index+1}. {e.h}:{e.m}:{e.s}:{e.ms}\n        </h3>)}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}